name: Release

on: workflow_dispatch

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Install unzip
        run: sudo apt-get install unzip

      - name: Download a workflow artifact
        run: |
          # Fetch the list of workflow runs for the CI workflow
          response=$(curl \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/trippwill/sharp-schema/actions/workflows/9258273695/runs?branch=main")

          # Get the workflow_run_id of the latest successful run
          workflow_run_id=$(echo "$response" | jq -r '.workflow_runs[] | select(.conclusion=="success") | .id' | head -1)

          # Fetch the list of artifacts for the specified workflow run
          response=$(curl \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/trippwill/sharp-schema/actions/runs/$workflow_run_id/artifacts")

          # Get the download_url of the artifact
          download_url=$(echo "$response" | jq -r '.artifacts[] | select(.name=="deployables-Linux") | .archive_download_url')

          # Download the artifact
          curl \
            -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -o artifact.zip \
            "$download_url"

          # Extract the artifact
          unzip artifact.zip -d path/to/unzip/artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(ls path/to/unzip/artifact/SharpSchema.*.nupkg | sed -n -e 's/^.*SharpSchema\.\(.*\)\.nupkg/\1/p')
          echo "::set-output name=version::${VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: true

      - name: Attach artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/unzip/artifact/*.nupkg
          asset_name: artifact.nupkg
          asset_content_type: application/octet-stream

      - name: Attach symbols to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/unzip/artifact/*.snupkg
          asset_name: artifact.snupkg
          asset_content_type: application/octet-stream

      - name: Publish NuGet packages
        uses: nuget/setup-nuget@v1
      - name: Push NuGet packages
        run: |
          for file in path/to/unzip/artifact/*.nupkg; do
            dotnet nuget push $file --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
          done
